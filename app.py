from flask import Flask, jsonify, request
from db import get_url_info, add_url

app = Flask(__name__)


# This is the API key that clients must include in their requests.
# In a real implementation, the API key would be stored in a secure
# way and checked against a list of authorized keys.
API_KEY= "abc123"


#Preferred way of storing API_key and user meta data is through RDBMS, due to short of time I am using dictionary to mimic the same
#Similarly API_key validation would be performed through database checks
def isValidAPIkey(key):
    list_user_db = [ {"id" : 1, "API_KEY" : "abc123", "roles" :"admin"},{"id" : 3, "API_KEY" : "abc121", "roles" :"admin"} ]
    #replacing db with list for this demo
    for x in list_user_db:
        if key == x['API_KEY']: 
            if x['roles']=='admin':
                return True
    return False


@app.route('/')
def index():
    return '<h1>Malware URL lookup web service</h1>'

@app.route('/v1/urlinfo/<path:url>', methods=["GET"])
def link_info(url):
    # Check if the API key is included in the request and is valid.
    print("Req Headers : ",request.headers)
    if "api_key" not in request.headers:
        return jsonify({"error": "Credentials not found","message":"Please include the API key "}), 401
    elif isValidAPIkey(request.headers["api_key"])!=True: 
        return jsonify({"error": "Unauthorized","message":"API key invalid"}), 401
    
    # Check if the requested URL is in the database of malware URLs.
    resp = db_call(url)
 
    if resp:
        return jsonify({
            "safe": False,
            "details":resp
                })
    else:
        return jsonify({"safe": True})

def db_call(url):
    resp= get_url_info(url)
    return resp

@app.route("/v1/addurl", methods=["GET","POST"])
def add_url_db():
    # Check if the API key is included in the request and is valid.
    if "api_key" not in request.headers:
        return jsonify({"error": "Credentials not found","message":"Please include the API key "}), 401
    elif request.headers["api_key"] != API_KEY:
        return jsonify({"error": "Unauthorized","message":"API key invalid"}), 401

    if "url" not in request.args or "type" not in request.args:
        return jsonify({"error": "Bad request","message":"Parameter missing"}), 400

    # Read the URL, type from the request parameters.
    url = request.args["url"]
    url_type = request.args["type"]


    # Call the add_url function to add the URL to the database.
    add_url(url, url_type)

    return jsonify({"success": True,"message":url + " added successfully "}), 200




