from flask import Flask, jsonify, request
from db import get_url_info, add_url

app = Flask(__name__)


# This is the API key that clients must include in their requests.
# In a real implementation, the API key would be stored in a secure
# way and checked against a list of authorized keys.
API_KEY= "abc123"


@app.route('/')
def index():
    return '<h1>Malware URL lookup web service</h1>'

@app.route('/v1/urlinfo/<path:url>', methods=["GET"])
def link_info(url):
    if "api_key" not in request.args:
        return jsonify({"error": "forbidden/not found","message":"Please include the API key "}), 401
    elif request.args["api_key"] != API_KEY:
        return jsonify({"error": "Unauthorized","message":"API key invalid"}), 401
    
    # Check if the requested URL is in the database of malware URLs.
    resp = db_call(url)
    print("RESP : ",resp)
    if resp:
        return jsonify({
            "safe": False,
            "details":resp
                })
    else:
        return jsonify({"safe": True})

def db_call(url):
    resp= get_url_info(url)
    return resp

@app.route("/v1/addurl", methods=["GET","POST"])
def add_url_db():
    print("works")
    # Check if the API key is included in the request and is valid.
    if "api_key" not in request.args or request.args["api_key"] != API_KEY:
        return jsonify({"error": "Unauthorized"}), 401

    # Read the URL, type from the request parameters.
    url = request.args["url"]
    url_type = request.args["type"]


    # Call the add_url function to add the URL to the database.
    add_url(url, url_type)

    return jsonify({"success": True})






##SQL LITE connection

